name: Dawn New Release

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version'
        required: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - architecture: arm
            os: macos-14
          - architecture: x64
            os: macos-latest # this is `macos-12` rn
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install python@3.12 || true # brew link fails, so ignore the error
          brew link --overwrite python@3.12
          brew install jq
          brew install libomp
          brew install tesseract
          brew install leptonica
          brew install pkg-config
      - name: Install dependencies
        run: |
          echo "installing horizon & external deps"
          yarn workspace horizon install --frozen-lockfile
          echo "installing tela"
          yarn workspace @horizon/tela install
          yarn workspace @horizon/tela build
          echo "installing cmdk"
          yarn workspace @horizon/cmdk-sv install
          yarn workspace @horizon/cmdk-sv build
          echo "installing rest of the project's deps"
          yarn install --frozen-lockfile
      - name: Set version as env variable
        run: echo "APP_VERSION=${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV

      - name: Build for ${{ matrix.architecture }}
        run: |
          if [ "${{ matrix.architecture }}" == "arm" ]; then
            yarn build:horizon:mac:arm
          else
            yarn build:horizon:mac:x64
          fi
        env:
          HUSKY: 0
          # from secrets
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          S3_UPDATES_BUCKET_NAME: ${{ secrets.S3_UPDATES_BUCKET_NAME }}
          S3_UPDATES_BUCKET_REGION: ${{ secrets.S3_UPDATES_BUCKET_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          R_VITE_TELEMETRY_API_KEY: ${{ secrets.TELEMETRY_API_KEY_EA }}
          R_VITE_FEEDBACK_PAGE_URL: ${{ secrets.FEEDBACK_PAGE_URL }}
          P_VITE_OPEN_AI_API_ENDPOINT: ${{ secrets.OPEN_AI_API_ENDPOINT }}
          P_VITE_VISION_API_ENDPOINT: ${{ secrets.VISION_API_ENDPOINT }}
          P_VITE_API_BASE: ${{ secrets.API_BASE }}
          M_VITE_API_BASE: ${{ secrets.API_BASE }}

          # from env/inuts
          APP_VERSION: ${{ inputs.app_version }}
          M_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          R_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          # preset
          RELEASE_CHANNEL: new-dawn
          PRODUCT_NAME: 'Horizon Dawn'
          M_VITE_PRODUCT_NAME: 'Horizon Dawn'
          SHOULD_NOTARIZE: true
          BUILD_RESOURCES_DIR: build/resources/dawn

      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.architecture }}
          path: |
            apps/desktop/dist/*.dmg
            apps/desktop/dist/*.blockmap

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: build/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ inputs.pre_release }}
          tag_name: v${{ env.APP_VERSION }}
          files: |
            build/**/*.dmg
            build/**/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
