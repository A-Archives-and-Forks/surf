name: Build & Release On PR Label

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

on:
  pull_request:
    types: [labeled]

env:
  TIPTAP_REGISTRY_TOKEN: ${{ secrets.TIPTAP_REGISTRY_TOKEN }}

jobs:
  prepare:
    runs-on: ubuntu-22.04
    if: contains(fromJSON('["mac-build", "win-build", "linux-build"]'), github.event.label.name)
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      version_tag: ${{ steps.set-version-tag.outputs.VERSION_TAG }}
    steps:
      - id: set-matrix
        run: |
          matrix="{\"include\":["
          if [[ "${{ github.event.label.name }}" == "mac-build" ]]; then
            matrix="$matrix{\"os\":\"macos-14\",\"architecture\":\"arm\",\"build_command\":\"yarn build:desktop:mac:arm\"},"
          fi
          if [[ "${{ github.event.label.name }}" == "win-build" ]]; then
            matrix="$matrix{\"os\":\"windows-latest\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:win:x64\"},"
          fi
          if [[ "${{ github.event.label.name }}" == "linux-build" ]]; then
            matrix="$matrix{\"os\":\"ubuntu-22.04\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:lin:x64\"},"
          fi
          matrix="${matrix%,}]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
      - id: set-version-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c 1-7)
          echo "VERSION_TAG=${{ github.head_ref }}-$SHORT_SHA" | sed 's/\//-/g' >> $GITHUB_OUTPUT

  build:
    needs: prepare
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.16.0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ matrix.architecture }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.architecture }}-node-

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            packages/backend
            packages/backend-server
          key: ${{ runner.os }}-${{ matrix.architecture }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Turbo
        uses: actions/cache@v3
        with:
          path: |
            .turbo
            node_modules/.cache/turbo
          key: ${{ runner.os }}-${{ matrix.architecture }}-turbo-${{ hashFiles('**/package.json', '**/yarn.lock', 'turbo.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.architecture }}-turbo-

      - name: Install dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --network-timeout 300000

      - name: build for ${{ matrix.os }}-${{ matrix.architecture }}
        run: ${{ matrix.build_command }}
        env:
          APP_VERSION: 0.0.1-${{ needs.prepare.outputs.version_tag }}
          M_VITE_APP_VERSION: 0.0.1-${{ needs.prepare.outputs.version_tag }}
          P_VITE_APP_VERSION: 0.0.1-${{ needs.prepare.outputs.version_tag }}

          HUSKY: 0
          NODE_OPTIONS: --max_old_space_size=8192
          SHOULD_NOTARIZE: 'true'
          DISABLE_ALL_OBFUSCATION: 'false'

          PRODUCT_NAME: 'Surf'
          M_VITE_PRODUCT_NAME: 'Surf'
          BUILD_RESOURCES_DIR: build/resources/dev

          APPLE_ID: ${{ secrets.APPLE_ID_NEW }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID_NEW }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD_NEW }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD_NEW }}
          CSC_LINK: ${{ secrets.CSC_LINK_NEW }}
          CSC_FOR_PULL_REQUEST: 'true'

          R_VITE_TELEMETRY_PROXY_URL: ${{ secrets.TELEMETRY_PROXY_URL }}
          R_VITE_FEEDBACK_URL: ${{ secrets.FEEDBACK_PAGE_URL }}
          R_VITE_CHEAT_SHEET_URL: ${{ secrets.CHEAT_SHEET_URL }}
          R_VITE_SHORTCUTS_PAGE_URL: ${{ secrets.SHORTCUTS_PAGE_URL }}
          R_VITE_MAIN_ONBOARDING_VIDEO_URL: ${{ secrets.MAIN_ONBOARDING_VIDEO_URL }}/${{ inputs.b_app_version }}
          P_VITE_API_BASE: ${{ secrets.API_BASE }}
          M_VITE_API_BASE: ${{ secrets.API_BASE }}
          M_VITE_ANNOUNCEMENTS_URL: ${{ secrets.ANNOUNCEMENTS_URL }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.version_tag }}-build-${{ matrix.os }}-${{ matrix.architecture }}
          path: |
            apps/desktop/dist/*.dmg
            apps/desktop/dist/*.exe
            apps/desktop/dist/*.AppImage
            apps/desktop/dist/*.tar.gz
            apps/desktop/dist/surf-*.yml

  create-release:
    needs: [prepare, build]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: build/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          tag_name: ${{ needs.prepare.outputs.version_tag }}
          files: |
            build/**/*.dmg
            build/**/*.exe
            build/**/*.AppImage
            build/**/surf-*.yml

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update Pull Request with Release URL
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Release is available [here](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${{ needs.prepare.outputs.version_tag}}).`
            })
