name: Dawn Release

on:
  schedule:
    # every weekday at 20:03 UTC
    - cron: '3 20 * * 1-5'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.next-dawn-version.outputs.version }}
      skip_release: ${{ steps.skip-release-check.outputs.skip_release }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Get latest dawn version
        id: latest-dawn-version
        run: |
          echo "version=$(git tag -l | grep dawn | sort -rV | head -n 1)" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - run: npm install semver

      - name: Set dawn version
        id: next-dawn-version
        uses: actions/github-script@v7
        env:
          LATEST_DAWN_VERSION: ${{ steps.latest-dawn-version.outputs.version }}
        with:
          script: |
            const semver = require('semver');
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const latestStableVersion = release.data.tag_name;
            let nextDawnVersion = semver.inc(latestStableVersion, 'prerelease', 'dawn');

            const latestDawnVersion = process.env.LATEST_DAWN_VERSION;
            if (latestDawnVersion) {
                const candidate = semver.inc(latestDawnVersion, 'prerelease', 'dawn');
                nextDawnVersion = semver.gt(candidate, nextDawnVersion) ? candidate : nextDawnVersion;
            }
            core.setOutput('version', nextDawnVersion);

      # TODO: correct this check and add a check for the latest commit hash
      - name: Check if version is already released
        id: skip-release-check
        run: |
          echo "skip_release=false" >> "$GITHUB_OUTPUT"

  build-and-release:
    needs: prepare
    if: ${{ needs.prepare.outputs.skip_release == 'false' }}
    runs-on: macos-latest
    timeout-minutes: 30
    outputs:
      release-id: ${{ steps.release.outputs.id }}
      version: ${{ needs.prepare.outputs.version }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set version as env variable
        run: echo "APP_VERSION=${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        # using retries as there are recurring cases for unknown reasons where the yarn install gets stuck
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 2
          command: yarn install --frozen-lockfile

      - name: Build
        run: yarn build:horizon:mwl
        env:
          HUSKY: 0
          # from secrets
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          S3_UPDATES_BUCKET_NAME: ${{ secrets.S3_UPDATES_BUCKET_NAME }}
          S3_UPDATES_BUCKET_REGION: ${{ secrets.S3_UPDATES_BUCKET_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          R_VITE_TELEMETRY_API_KEY: ${{ secrets.TELEMETRY_API_KEY }}
          # from env
          APP_VERSION: ${{ env.APP_VERSION }}
          M_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          R_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          # composite
          R_VITE_CHEATSHEET_URL: ${{ secrets.CHEATSHEET_URL_BASE }}/${{ env.APP_VERSION }}
          # preset
          RELEASE_CHANNEL: dawn
          PRODUCT_NAME: 'Horizon Dawn'
          M_VITE_PRODUCT_NAME: 'Horizon Dawn'
          SHOULD_NOTARIZE: true
          BUILD_RESOURCES_DIR: build/resources/dawn

      - id: release
        name: Create Github Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          tag_name: v${{ env.APP_VERSION }}
          files: |
            apps/desktop/dist/*.exe
            apps/desktop/dist/*.zip
            apps/desktop/dist/*.dmg
            apps/desktop/dist/*.AppImage
            apps/desktop/dist/*.snap
            apps/desktop/dist/*.deb
            apps/desktop/dist/*.rpm
            apps/desktop/dist/*.tar.gz
            apps/desktop/dist/*.yml
            apps/desktop/dist/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
