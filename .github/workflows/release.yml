name: Build & Release

permissions:
  id-token: write
  contents: write

on:
  workflow_dispatch:
    inputs:
      a_product_name:
        type: string
        description: 'App Name'
        required: true
        default: 'Surf'
      b_should_notarize:
        type: boolean
        description: 'Notarize (macOS)?'
        default: true
      c_sign_windows:
        type: boolean
        description: 'Sign Windows build?'
        default: false
      d_disable_all_obfuscation:
        type: boolean
        description: 'Disable All Obfuscation'
        default: false
      e_run_macos_arm:
        type: boolean
        description: 'Run macOS ARM build'
        default: true
      f_run_macos_x64:
        type: boolean
        description: 'Run macOS x64 build'
        default: false
      g_run_windows_x64:
        type: boolean
        description: 'Run Windows x64 build'
        default: false
      h_run_linux_arm:
        type: boolean
        description: 'Run Linux ARM build'
        default: false
      i_run_linux_x64:
        type: boolean
        description: 'Run Linux x64 build'
        default: false

jobs:
  determine_builds:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          matrix="{\"include\":["
          if [[ "${{ inputs.e_run_macos_arm }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"macos-14\",\"architecture\":\"arm\",\"build_command\":\"yarn build:desktop:mac:arm\"},"
          fi
          if [[ "${{ inputs.f_run_macos_x64 }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"macos-13\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:mac:x64\"},"
          fi
          if [[ "${{ inputs.g_run_windows_x64 }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"windows-latest\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:win:x64\"},"
          fi
          if [[ "${{ inputs.h_run_linux_arm }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"linux-arm64-large\",\"architecture\":\"arm\",\"build_command\":\"yarn build:desktop:lin:arm\"},"
          fi
          if [[ "${{ inputs.i_run_linux_x64 }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"ubuntu-latest\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:lin:x64\"},"
          fi
          matrix="${matrix%,}]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: determine_builds
    strategy:
      matrix: ${{fromJson(needs.determine_builds.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cargo/registry
            ~/.cargo/git
            target
            **/target
          key: ${{ runner.os }}-${{ matrix.architecture }}-build-cache-${{ hashFiles('**/yarn.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.architecture }}-build-cache-

      - name: Set up Windows Sign Tool
        if: matrix.os == 'windows-latest' && inputs.c_sign_windows == true
        run: dotnet tool install --no-cache --global AzureSignTool --version 5.0.0

      - name: Azure Login
        if: matrix.os == 'windows-latest' && inputs.c_sign_windows == true
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure Key Vault Access Token
        if: matrix.os == 'windows-latest' && inputs.c_sign_windows == true
        run: |
          $az_token=$(az account get-access-token --scope https://vault.azure.net/.default --query accessToken -o tsv)
          echo "::add-mask::$az_token"
          echo "AZURE_KEYVAULT_ACCESS_TOKEN=$az_token" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --network-timeout 300000

      - name: build for ${{ matrix.os }}-${{ matrix.architecture }}
        run: ${{ matrix.build_command }}
        env:
          # APP_VERSION: ${{ inputs.app_version }}
          # M_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          # R_VITE_APP_VERSION: ${{ env.APP_VERSION }}

          HUSKY: 0
          NODE_OPTIONS: --max_old_space_size=8192
          SHOULD_NOTARIZE: ${{ inputs.b_should_notarize }}
          DISABLE_ALL_OBFUSCATION: ${{ inputs.d_disable_all_obfuscation }}

          PRODUCT_NAME: ${{ inputs.a_product_name }}
          M_VITE_PRODUCT_NAME: 'Surf'
          BUILD_RESOURCES_DIR: build/resources/prod

          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}

          # R_VITE_CHEATSHEET_URL: ${{ secrets.CHEATSHEET_URL_BASE }}/${{ inputs.APP_VERSION }}
          R_VITE_TELEMETRY_API_KEY: ${{ secrets.TELEMETRY_API_KEY_EA }}
          R_VITE_FEEDBACK_URL: ${{ secrets.FEEDBACK_PAGE_URL }}
          P_VITE_OPEN_AI_API_ENDPOINT: ${{ secrets.OPEN_AI_API_ENDPOINT }}
          P_VITE_VISION_API_ENDPOINT: ${{ secrets.VISION_API_ENDPOINT }}
          P_VITE_API_BASE: ${{ secrets.API_BASE }}
          M_VITE_API_BASE: ${{ secrets.API_BASE }}

          M_VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN_SURF_DEV }}
          R_VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN_SURF_DEV }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

          # windows code signing configuration
          SIGN_WINDOWS: ${{ inputs.c_sign_windows }}
          AZURE_KEYVAULT_CERTIFICATE_NAME: ${{ secrets.AZURE_KEYVAULT_CERTIFICATE_NAME }}
          AZURE_KEYVAULT_URL: ${{ secrets.AZURE_KEYVAULT_URL }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_KEYVAULT_ACCESS_TOKEN: ${{ env.AZURE_KEYVAULT_ACCESS_TOKEN }}

      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.architecture }}
          path: |
            apps/desktop/dist/*.dmg
            apps/desktop/dist/*.exe
            apps/desktop/dist/*.AppImage
            apps/desktop/dist/*.tar.gz

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: build/
      - name: create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          tag_name: release-${{ github.sha }}
          files: |
            build/**/*.dmg
            build/**/*.exe
            build/**/*.AppImage
            build/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
