name: Build & Release

on:
  workflow_dispatch:
    inputs:
      product_name:
        type: string
        description: 'App Name'
        required: true
        default: 'Surf'
      should_notarize:
        type: boolean
        description: 'Notarize (macOS)?'
        default: true
      a_run_macos_arm:
        type: boolean
        description: 'Run macOS ARM build'
        default: true
      b_run_macos_x64:
        type: boolean
        description: 'Run macOS x64 build'
        default: false
      c_run_windows_x64:
        type: boolean
        description: 'Run Windows x64 build'
        default: false
      d_run_linux_arm:
        type: boolean
        description: 'Run Linux ARM build'
        default: false
      e_run_linux_x64:
        type: boolean
        description: 'Run Linux x64 build'
        default: false

jobs:
  determine_builds:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          matrix="{\"include\":["
          if [[ "${{ inputs.a_run_macos_arm }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"macos-14\",\"architecture\":\"arm\",\"build_command\":\"yarn build:desktop:mac:arm\"},"
          fi
          if [[ "${{ inputs.b_run_macos_x64 }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"macos-13\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:mac:x64\"},"
          fi
          if [[ "${{ inputs.c_run_windows_x64 }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"windows-latest\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:win:x64\"},"
          fi
          if [[ "${{ inputs.d_run_linux_arm }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"linux-arm64-large\",\"architecture\":\"arm\",\"build_command\":\"yarn build:desktop:lin:arm\"},"
          fi
          if [[ "${{ inputs.e_run_linux_x64 }}" == "true" ]]; then
            matrix="$matrix{\"os\":\"ubuntu-latest\",\"architecture\":\"x64\",\"build_command\":\"yarn build:desktop:lin:x64\"},"
          fi
          matrix="${matrix%,}]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: determine_builds
    strategy:
      matrix: ${{fromJson(needs.determine_builds.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Set up Windows build environment
        if: matrix.os == 'windows-latest'
        run: |
          choco install visualstudio2019buildtools -y --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
          choco install llvm -y
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat" >> $env:GITHUB_PATH
          echo "C:\Program Files\LLVM\bin" >> $env:GITHUB_PATH
          cl
          clang --version
        shell: cmd
      - name: install dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --network-timeout 300000
      - name: build for ${{ matrix.os }}-${{ matrix.architecture }}
        run: ${{ matrix.build_command }}
        env:
          # APP_VERSION: ${{ inputs.app_version }}
          # M_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          # R_VITE_APP_VERSION: ${{ env.APP_VERSION }}

          HUSKY: 0
          NODE_OPTIONS: --max_old_space_size=8192
          SHOULD_NOTARIZE: ${{ inputs.should_notarize }}

          PRODUCT_NAME: ${{ inputs.product_name }}
          M_VITE_PRODUCT_NAME: 'Surf'
          BUILD_RESOURCES_DIR: build/resources/prod

          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}

          # R_VITE_CHEATSHEET_URL: ${{ secrets.CHEATSHEET_URL_BASE }}/${{ inputs.APP_VERSION }}
          R_VITE_TELEMETRY_API_KEY: ${{ secrets.TELEMETRY_API_KEY_EA }}
          R_VITE_FEEDBACK_URL: ${{ secrets.FEEDBACK_PAGE_URL }}
          P_VITE_OPEN_AI_API_ENDPOINT: ${{ secrets.OPEN_AI_API_ENDPOINT }}
          P_VITE_VISION_API_ENDPOINT: ${{ secrets.VISION_API_ENDPOINT }}
          P_VITE_API_BASE: ${{ secrets.API_BASE }}
          M_VITE_API_BASE: ${{ secrets.API_BASE }}

          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # S3_UPDATES_BUCKET_NAME: ${{ secrets.S3_UPDATES_BUCKET_NAME }}
          # S3_UPDATES_BUCKET_REGION: ${{ secrets.S3_UPDATES_BUCKET_REGION }}
          # SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.architecture }}
          path: |
            apps/desktop/dist/*.dmg
            apps/desktop/dist/*.exe
            apps/desktop/dist/*.AppImage
            apps/desktop/dist/*.tar.gz

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: build/
      - name: create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          tag_name: release-${{ github.sha }}
          files: |
            build/**/*.dmg
            build/**/*.exe
            build/**/*.AppImage
            build/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
