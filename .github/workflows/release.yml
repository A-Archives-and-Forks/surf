name: Build & Release

on:
  workflow_dispatch:
    inputs:
      should_notarize:
        type: boolean
        description: 'Notarize (macOS)?'
        default: true
      pre_release:
        type: boolean
        description: 'Pre-release?'
        default: true
      increment_type:
        description: 'Version Increment Type (patch, minor, major)'
        required: true
        default: 'patch'
      product_name:
        type: string
        description: 'App Name'
        required: true
        default: 'Horizon'
      custom_build_tag:
        type: string
        description: 'Build Tag (Ignored if non prerelease)'
        required: false

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      # this is hack to prevent this github action to tag pre-releases from main as non pre-release semver
      # the 'release_branch' input sets the default release branch for the version increment action
      # if pre_release is true, the following action will always set this release branch to 'release'
      # so that the version increment action will always increment the version as a pre-release even from 'main'
      # TODO: use better self controlled semver action
      - name: Set release branch as env variable
        run: |
          if [ "${{ github.event.inputs.pre_release }}" == "true" ]; then
            echo "RELEASE_BRANCH=release" >> $GITHUB_ENV
          else
            echo "RELEASE_BRANCH=main" >> $GITHUB_ENV
          fi

      - name: Get next version
        uses: reecetech/version-increment@2023.9.3
        id: version
        env:
          RELEASE_BRANCH: ${{ env.RELEASE_BRANCH }}
        with:
          scheme: semver
          increment: ${{ github.event.inputs.increment_type }}
          release_branch: ${{ env.RELEASE_BRANCH }}

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          - architecture: arm
            os: macos-14
          - architecture: x64
            os: macos-latest # this is `macos-12` rn
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install python@3.12 || true # brew link fails, so ignore the error
          brew link --overwrite python@3.12
          brew install jq
          brew install libomp
          brew install tesseract
          brew install leptonica
          brew install pkg-config
      - name: Install dependencies
        run: |
          echo "installing horizon & external deps"
          yarn workspace horizon install --frozen-lockfile
          echo "installing tela"
          yarn workspace @horizon/tela install
          yarn workspace @horizon/tela build
          echo "installing cmdk"
          yarn workspace @horizon/cmdk-sv install
          yarn workspace @horizon/cmdk-sv build
          echo "installing rest of the project's deps"
          yarn install --frozen-lockfile
      - name: Set Build Env Variables
        run: |
          if [ "${{ github.event.inputs.pre_release }}" == "true" ]; then
              echo "RELEASE_CHANNEL=${{ github.ref_name }}" | sed 's/\//-/g' >> $GITHUB_ENV
              echo "BUILD_TAG=${{ inputs.custom_build_tag || github.ref_name }}" | sed 's/\//-/g' >> $GITHUB_ENV
              echo "BUILD_RESOURCES_DIR=build/resources/dev" >> $GITHUB_ENV
          fi
      - name: Build for ${{ matrix.architecture }}
        run: |
          if [ "${{ matrix.architecture }}" == "arm" ]; then
            yarn build:horizon:mac:arm
          else
            yarn build:horizon:mac:x64
          fi
        env:
          HUSKY: 0
          # from secrets
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          S3_UPDATES_BUCKET_NAME: ${{ secrets.S3_UPDATES_BUCKET_NAME }}
          S3_UPDATES_BUCKET_REGION: ${{ secrets.S3_UPDATES_BUCKET_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          R_VITE_TELEMETRY_API_KEY: ${{ secrets.TELEMETRY_API_KEY }}
          # from env
          APP_VERSION: ${{ env.APP_VERSION }}
          M_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          R_VITE_APP_VERSION: ${{ env.APP_VERSION }}
          BUILD_TAG: ${{ env.BUILD_TAG }}
          BUILD_RESOURCES:DIR: ${{ env.BUILD_RESOURCES_DIR }}
          M_VITE_BUILD_TAG: ${{ env.BUILD_TAG }}
          R_VITE_BUILD_TAG: ${{ env.BUILD_TAG }}
          RELEASE_CHANNEL: ${{ env.RELEASE_CHANNEL }}
          # composite
          R_VITE_CHEATSHEET_URL: ${{ secrets.CHEATSHEET_URL_BASE }}/${{ env.APP_VERSION }}
          # from inputs
          PRODUCT_NAME: ${{ inputs.product_name }}
          SHOULD_NOTARIZE: ${{ inputs.should_notarize }}
          M_VITE_USE_TMP_DATA_DIR: ${{ inputs.pre_release }}
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.architecture }}
          path: |
            apps/desktop/dist/*.dmg
            apps/desktop/dist/*.blockmap

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: build/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ inputs.pre_release }}
          tag_name: v${{ env.APP_VERSION }}
          files: |
            build/**/*.dmg
            build/**/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
