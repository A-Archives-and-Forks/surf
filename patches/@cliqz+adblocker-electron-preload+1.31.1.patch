diff --git a/node_modules/@cliqz/adblocker-electron-preload/dist/index.cjs b/node_modules/@cliqz/adblocker-electron-preload/dist/index.cjs
index 73a81aa..62f0cc3 100644
--- a/node_modules/@cliqz/adblocker-electron-preload/dist/index.cjs
+++ b/node_modules/@cliqz/adblocker-electron-preload/dist/index.cjs
@@ -203,73 +203,6 @@ class DOMMonitor {
         return false;
     }
 }
-/**
- * Wrap a self-executing script into a block of custom logic to remove the
- * script tag once execution is terminated. This can be useful to not leave
- * traces in the DOM after injections.
- */
-function autoRemoveScript(script) {
-    // Minified using 'terser'
-    return `try{${script}}catch(c){}!function(){var c=document.currentScript,e=c&&c.parentNode;e&&e.removeChild(c)}();`;
-    // Original:
-    //
-    //    try {
-    //      ${script}
-    //    } catch (ex) { }
-    //
-    //    (function() {
-    //      var currentScript = document.currentScript;
-    //      var parent = currentScript && currentScript.parentNode;
-    //
-    //      if (parent) {
-    //        parent.removeChild(currentScript);
-    //      }
-    //    })();
-}
-function insertNode(node, document) {
-    const parent = document.head || document.documentElement || document;
-    if (parent !== null) {
-        parent.appendChild(node);
-    }
-}
-function injectScriptlet(s, doc) {
-    const script = doc.createElement('script');
-    script.type = 'text/javascript';
-    script.id = SCRIPT_ID;
-    script.async = false;
-    script.appendChild(doc.createTextNode(autoRemoveScript(s)));
-    insertNode(script, doc);
-}
-function isFirefox(doc) {
-    var _a, _b, _c;
-    try {
-        return ((_c = (_b = (_a = doc.defaultView) === null || _a === void 0 ? void 0 : _a.navigator) === null || _b === void 0 ? void 0 : _b.userAgent) === null || _c === void 0 ? void 0 : _c.indexOf('Firefox')) !== -1;
-    }
-    catch (e) {
-        return false;
-    }
-}
-async function injectScriptletFirefox(s, doc) {
-    const win = doc.defaultView;
-    const script = doc.createElement('script');
-    script.async = false;
-    script.id = SCRIPT_ID;
-    const blob = new win.Blob([autoRemoveScript(s)], { type: 'text/javascript; charset=utf-8' });
-    const url = win.URL.createObjectURL(blob);
-    // a hack for tests to that allows for async URL.createObjectURL
-    // eslint-disable-next-line @typescript-eslint/await-thenable
-    script.src = await url;
-    insertNode(script, doc);
-    win.URL.revokeObjectURL(url);
-}
-function injectScript(s, doc) {
-    if (isFirefox(doc)) {
-        injectScriptletFirefox(s, doc);
-    }
-    else {
-        injectScriptlet(s, doc);
-    }
-}
 
 /*!
  * Copyright (c) 2017-present Ghostery GmbH. All rights reserved.
@@ -285,7 +218,7 @@ function getCosmeticsFiltersUpdate(data) {
     electron.ipcRenderer.send('get-cosmetic-filters', window.location.href, data);
 }
 if (window === window.top && window.location.href.startsWith('devtools://') === false) {
-    (() => {
+    (async () => {
         const enableMutationObserver = electron.ipcRenderer.sendSync('is-mutation-observer-enabled');
         let ACTIVE = true;
         let DOM_MONITOR = null;
@@ -308,7 +241,7 @@ if (window === window.top && window.location.href.startsWith('devtools://') ===
         const scripts = getCosmeticsFiltersFirst();
         if (scripts) {
             for (const script of scripts) {
-                injectScript(script, document);
+                await electron.ipcRenderer.invoke('adblocker-inject-script', script);
             }
         }
         // On DOMContentLoaded, start monitoring the DOM. This means that we will
diff --git a/node_modules/@cliqz/adblocker-electron-preload/dist/index.js b/node_modules/@cliqz/adblocker-electron-preload/dist/index.js
index 7cb11f8..a2480dd 100644
--- a/node_modules/@cliqz/adblocker-electron-preload/dist/index.js
+++ b/node_modules/@cliqz/adblocker-electron-preload/dist/index.js
@@ -201,73 +201,6 @@ class DOMMonitor {
         return false;
     }
 }
-/**
- * Wrap a self-executing script into a block of custom logic to remove the
- * script tag once execution is terminated. This can be useful to not leave
- * traces in the DOM after injections.
- */
-function autoRemoveScript(script) {
-    // Minified using 'terser'
-    return `try{${script}}catch(c){}!function(){var c=document.currentScript,e=c&&c.parentNode;e&&e.removeChild(c)}();`;
-    // Original:
-    //
-    //    try {
-    //      ${script}
-    //    } catch (ex) { }
-    //
-    //    (function() {
-    //      var currentScript = document.currentScript;
-    //      var parent = currentScript && currentScript.parentNode;
-    //
-    //      if (parent) {
-    //        parent.removeChild(currentScript);
-    //      }
-    //    })();
-}
-function insertNode(node, document) {
-    const parent = document.head || document.documentElement || document;
-    if (parent !== null) {
-        parent.appendChild(node);
-    }
-}
-function injectScriptlet(s, doc) {
-    const script = doc.createElement('script');
-    script.type = 'text/javascript';
-    script.id = SCRIPT_ID;
-    script.async = false;
-    script.appendChild(doc.createTextNode(autoRemoveScript(s)));
-    insertNode(script, doc);
-}
-function isFirefox(doc) {
-    var _a, _b, _c;
-    try {
-        return ((_c = (_b = (_a = doc.defaultView) === null || _a === void 0 ? void 0 : _a.navigator) === null || _b === void 0 ? void 0 : _b.userAgent) === null || _c === void 0 ? void 0 : _c.indexOf('Firefox')) !== -1;
-    }
-    catch (e) {
-        return false;
-    }
-}
-async function injectScriptletFirefox(s, doc) {
-    const win = doc.defaultView;
-    const script = doc.createElement('script');
-    script.async = false;
-    script.id = SCRIPT_ID;
-    const blob = new win.Blob([autoRemoveScript(s)], { type: 'text/javascript; charset=utf-8' });
-    const url = win.URL.createObjectURL(blob);
-    // a hack for tests to that allows for async URL.createObjectURL
-    // eslint-disable-next-line @typescript-eslint/await-thenable
-    script.src = await url;
-    insertNode(script, doc);
-    win.URL.revokeObjectURL(url);
-}
-function injectScript(s, doc) {
-    if (isFirefox(doc)) {
-        injectScriptletFirefox(s, doc);
-    }
-    else {
-        injectScriptlet(s, doc);
-    }
-}
 
 /*!
  * Copyright (c) 2017-present Ghostery GmbH. All rights reserved.
@@ -283,7 +216,7 @@ function getCosmeticsFiltersUpdate(data) {
     ipcRenderer.send('get-cosmetic-filters', window.location.href, data);
 }
 if (window === window.top && window.location.href.startsWith('devtools://') === false) {
-    (() => {
+    (async () => {
         const enableMutationObserver = ipcRenderer.sendSync('is-mutation-observer-enabled');
         let ACTIVE = true;
         let DOM_MONITOR = null;
@@ -306,7 +239,7 @@ if (window === window.top && window.location.href.startsWith('devtools://') ===
         const scripts = getCosmeticsFiltersFirst();
         if (scripts) {
             for (const script of scripts) {
-                injectScript(script, document);
+                await ipcRenderer.invoke('adblocker-inject-script', script);
             }
         }
         // On DOMContentLoaded, start monitoring the DOM. This means that we will
