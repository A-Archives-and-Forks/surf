diff --git a/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js b/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js
index 35484ec..bc4a5ab 100644
--- a/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js
+++ b/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js
@@ -1,2 +1,2 @@
-!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("electron"),require("tldts-experimental"),require("@ghostery/adblocker"),require("node:module")):"function"==typeof define&&define.amd?define(["exports","electron","tldts-experimental","@ghostery/adblocker","node:module"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).adblocker={},e.electron,e.tldtsExperimental,e.adblocker,e.node_module)}(this,(function(e,t,s,o,r){"use strict";var n="undefined"!=typeof document?document.currentScript:null;function i(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(s){if("default"!==s){var o=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,o.get?o:{enumerable:!0,get:function(){return e[s]}})}})),t.default=e,Object.freeze(t)}var l=i(t);const c=r.createRequire("undefined"==typeof document&&"undefined"==typeof location?require("url").pathToFileURL(__filename).href:"undefined"==typeof document?location.href:n&&"SCRIPT"===n.tagName.toUpperCase()&&n.src||new URL("adblocker.umd.min.js",document.baseURI).href).resolve("@ghostery/adblocker-electron-preload"),{ipcMain:a}=l;function d(e){const{id:t,url:s,resourceType:r,referrer:n,webContentsId:i}=e;return o.Request.fromRawDetails(i?{_originalRequestDetails:e,requestId:`${t}`,sourceUrl:n,tabId:i,type:r||"other",url:s}:{_originalRequestDetails:e,requestId:`${t}`,sourceUrl:n,type:r||"other",url:s})}process.env.ELECTRON_DISABLE_SECURITY_WARNINGS="true";class u{constructor(e,t){this.session=e,this.blocker=t,this.onBeforeRequest=(e,s)=>t.onBeforeRequest(e,s),this.onInjectCosmeticFilters=(e,s,o)=>t.onInjectCosmeticFilters(e,s,o),this.onHeadersReceived=(e,s)=>t.onHeadersReceived(e,s),this.onIsMutationObserverEnabled=e=>t.onIsMutationObserverEnabled(e)}enable(){!0===this.blocker.config.loadCosmeticFilters&&(this.session.setPreloads(this.session.getPreloads().concat([c])),a.handle("@ghostery/adblocker/inject-cosmetic-filters",this.onInjectCosmeticFilters),a.handle("@ghostery/adblocker/is-mutation-observer-enabled",this.onIsMutationObserverEnabled)),!0===this.blocker.config.loadNetworkFilters&&(this.session.webRequest.onHeadersReceived({urls:["<all_urls>"]},this.onHeadersReceived),this.session.webRequest.onBeforeRequest({urls:["<all_urls>"]},this.onBeforeRequest))}disable(){!0===this.blocker.config.loadNetworkFilters&&(this.session.webRequest.onHeadersReceived(null),this.session.webRequest.onBeforeRequest(null)),!0===this.blocker.config.loadCosmeticFilters&&(this.session.setPreloads(this.session.getPreloads().filter((e=>e!==c))),a.removeHandler("@ghostery/adblocker/inject-cosmetic-filters"),a.removeHandler("@ghostery/adblocker/is-mutation-observer-enabled"))}}class h extends o.FiltersEngine{constructor(){super(...arguments),this.contexts=new WeakMap,this.onIsMutationObserverEnabled=async e=>this.config.enableMutationObserver,this.onInjectCosmeticFilters=async(e,t,o)=>{const r=s.parse(t),n=r.hostname||"",i=r.domain||"",l=void 0===o,{active:c,styles:a,scripts:d}=this.getCosmeticsFilters({domain:i,hostname:n,url:t,classes:null==o?void 0:o.classes,hrefs:null==o?void 0:o.hrefs,ids:null==o?void 0:o.ids,getBaseRules:l,getInjectionRules:l,getExtendedRules:!1,getRulesFromHostname:l,getRulesFromDOM:!l,callerContext:{frameId:e.frameId,processId:e.processId,lifecycle:null==o?void 0:o.lifecycle}});if(!1!==c){a.length>0&&e.sender.insertCSS(a,{cssOrigin:"user"});for(const t of d)try{e.sender.executeJavaScript(t,!0)}catch(e){console.error("@ghostery/adblocker scriptlet crashed",e)}}},this.onHeadersReceived=(e,t)=>{const s="content-security-policy",o=[],r=e.responseHeaders||{};if("mainFrame"===e.resourceType||"subFrame"===e.resourceType){const n=this.getCSPDirectives(d(e));if(void 0!==n){o.push(...n.split(";").map((e=>e.trim())));for(const[e,t]of Object.entries(r))e.toLowerCase()===s&&(o.push(...t),delete r[e]);return r[s]=[o.join(";")],void t({responseHeaders:r})}}t({})},this.onBeforeRequest=(e,t)=>{const s=d(e);if(!0===this.config.guessRequestTypeFromUrl&&"other"===s.type&&s.guessTypeOfRequest(),s.isMainFrame())return void t({});const{redirect:o,match:r}=this.match(s);t(o?{redirectURL:o.dataUrl}:r?{cancel:!0}:{})}}enableBlockingInSession(e){let t=this.contexts.get(e);return void 0!==t||(t=new u(e,this),this.contexts.set(e,t),t.enable()),t}disableBlockingInSession(e){const t=this.contexts.get(e);if(void 0===t)throw new Error("Trying to disable blocking which was not enabled");this.contexts.delete(e),t.disable()}isBlockingEnabled(e){return this.contexts.has(e)}}e.BlockingContext=u,e.ElectronBlocker=h,e.fromElectronDetails=d,Object.keys(o).forEach((function(t){"default"===t||Object.prototype.hasOwnProperty.call(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:function(){return o[t]}})}))}));
+!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("electron"),require("tldts-experimental"),require("@ghostery/adblocker"),require("node:module")):"function"==typeof define&&define.amd?define(["exports","electron","tldts-experimental","@ghostery/adblocker","node:module"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).adblocker={},e.electron,e.tldtsExperimental,e.adblocker,e.node_module)}(this,function(e,t,s,o,r){"use strict";var n="undefined"!=typeof document?document.currentScript:null;function i(e){var t=Object.create(null);return e&&Object.keys(e).forEach(function(s){if("default"!==s){var o=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,o.get?o:{enumerable:!0,get:function(){return e[s]}})}}),t.default=e,Object.freeze(t)}var l=i(t);const c=r.createRequire("undefined"==typeof document&&"undefined"==typeof location?require("url").pathToFileURL(__filename).href:"undefined"==typeof document?location.href:n&&"SCRIPT"===n.tagName.toUpperCase()&&n.src||new URL("adblocker.umd.min.js",document.baseURI).href).resolve("@ghostery/adblocker-electron-preload"),{ipcMain:a}=l;function d(e){const{id:t,url:s,resourceType:r,referrer:n,webContentsId:i}=e;return o.Request.fromRawDetails(i?{_originalRequestDetails:e,requestId:`${t}`,sourceUrl:n,tabId:i,type:r||"other",url:s}:{_originalRequestDetails:e,requestId:`${t}`,sourceUrl:n,type:r||"other",url:s})}process.env.ELECTRON_DISABLE_SECURITY_WARNINGS="true";class u{constructor(e,t){this.session=e,this.blocker=t,this.onBeforeRequest=(e,s)=>t.onBeforeRequest(e,s),this.onInjectCosmeticFilters=(e,s,o)=>t.onInjectCosmeticFilters(e,s,o),this.onHeadersReceived=(e,s)=>t.onHeadersReceived(e,s),this.onIsMutationObserverEnabled=e=>t.onIsMutationObserverEnabled(e)}enable(){!0===this.blocker.config.loadCosmeticFilters&&(this.session.setPreloads(this.session.getPreloads().concat([c])),a.handle("@ghostery/adblocker/inject-cosmetic-filters",this.onInjectCosmeticFilters),a.handle("@ghostery/adblocker/is-mutation-observer-enabled",this.onIsMutationObserverEnabled)),!0===this.blocker.config.loadNetworkFilters&&(this.session.webRequest.onHeadersReceived({urls:["<all_urls>"]},this.onHeadersReceived),this.session.webRequest.onBeforeRequest({urls:["<all_urls>"]},this.onBeforeRequest))}disable(){!0===this.blocker.config.loadNetworkFilters&&(this.session.webRequest.onHeadersReceived(null),this.session.webRequest.onBeforeRequest(null)),!0===this.blocker.config.loadCosmeticFilters&&(this.session.setPreloads(this.session.getPreloads().filter(e=>e!==c)),a.removeHandler("@ghostery/adblocker/inject-cosmetic-filters"),a.removeHandler("@ghostery/adblocker/is-mutation-observer-enabled"))}}class h extends o.FiltersEngine{constructor(){super(...arguments),this.contexts=new WeakMap,this.onIsMutationObserverEnabled=async e=>this.config.enableMutationObserver,this.onInjectCosmeticFilters=async(e,t,o)=>{const r=s.parse(t),n=r.hostname||"",i=r.domain||"",l=void 0===o,{active:c,styles:a,scripts:d}=this.getCosmeticsFilters({domain:i,hostname:n,url:t,classes:null==o?void 0:o.classes,hrefs:null==o?void 0:o.hrefs,ids:null==o?void 0:o.ids,getBaseRules:l,getInjectionRules:l,getExtendedRules:!1,getRulesFromHostname:l,getRulesFromDOM:!l,callerContext:{frameId:e.frameId,processId:e.processId,lifecycle:null==o?void 0:o.lifecycle}});if(!1!==c){a.length>0&&e.sender.insertCSS(a,{cssOrigin:"user"});for(const t of d)try{e.sender.executeJavaScript(t,!0)}catch(e){console.error("@ghostery/adblocker scriptlet crashed",e)}}},this.onHeadersReceived=(e,t)=>{const s="content-security-policy",o=[],r=e.responseHeaders||{};if("mainFrame"===e.resourceType||"subFrame"===e.resourceType){const n=this.getCSPDirectives(d(e));if(void 0!==n){o.push(...n.split(";").map(e=>e.trim()));for(const[e,t]of Object.entries(r))e.toLowerCase()===s&&(o.push(...t),delete r[e]);return r[s]=[o.join(";")],void t({responseHeaders:r})}}t({})},this.onBeforeRequest=(e,t)=>{const s=d(e);if(!0===this.config.guessRequestTypeFromUrl&&"other"===s.type&&s.guessTypeOfRequest(),s.isMainFrame())return void t({});const{redirect:o,match:r}=this.match(s);t(o?{redirectURL:o.dataUrl}:r?{cancel:!0}:{})}}enableBlockingInSession(e){let t=this.contexts.get(e);return void 0!==t||(t=new u(e,this),this.contexts.set(e,t),t.enable()),t}disableBlockingInSession(e){const t=this.contexts.get(e);if(void 0===t)throw new Error("Trying to disable blocking which was not enabled");this.contexts.delete(e),t.disable()}isBlockingEnabled(e){return this.contexts.has(e)}}e.BlockingContext=u,e.ElectronBlocker=h,e.fromElectronDetails=d,Object.keys(o).forEach(function(t){"default"===t||Object.prototype.hasOwnProperty.call(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:function(){return o[t]}})})});
 //# sourceMappingURL=adblocker.umd.min.js.map
diff --git a/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js.map b/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js.map
index a5cdbda..aa49161 100644
--- a/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js.map
+++ b/node_modules/@ghostery/adblocker-electron/dist/adblocker.umd.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"adblocker.umd.min.js","sources":["esm/preload_path.js","esm/index.js"],"sourcesContent":["import { createRequire } from 'node:module';\n//@ts-ignore\nexport const PRELOAD_PATH = createRequire(import.meta.url).resolve('@ghostery/adblocker-electron-preload');\n//# sourceMappingURL=preload_path.js.map","/*!\n * Copyright (c) 2017-present Ghostery GmbH. All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nimport * as electron from 'electron';\nimport { parse } from 'tldts-experimental';\nimport { FiltersEngine, Request } from '@ghostery/adblocker';\nimport { PRELOAD_PATH } from './preload_path.js';\nconst { ipcMain } = electron;\n// https://stackoverflow.com/questions/48854265/why-do-i-see-an-electron-security-warning-after-updating-my-electron-project-t\nprocess.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';\n/**\n * Create an instance of `Request` from `Electron.OnBeforeRequestDetails`.\n */\nexport function fromElectronDetails(details) {\n    const { id, url, resourceType, referrer, webContentsId } = details;\n    return Request.fromRawDetails(webContentsId\n        ? {\n            _originalRequestDetails: details,\n            requestId: `${id}`,\n            sourceUrl: referrer,\n            tabId: webContentsId,\n            type: (resourceType || 'other'),\n            url,\n        }\n        : {\n            _originalRequestDetails: details,\n            requestId: `${id}`,\n            sourceUrl: referrer,\n            type: (resourceType || 'other'),\n            url,\n        });\n}\n/**\n * This abstraction takes care of blocking in one instance of `Electron.Session`.\n */\nexport class BlockingContext {\n    constructor(session, blocker) {\n        this.session = session;\n        this.blocker = blocker;\n        this.onBeforeRequest = (details, callback) => blocker.onBeforeRequest(details, callback);\n        this.onInjectCosmeticFilters = (event, url, msg) => blocker.onInjectCosmeticFilters(event, url, msg);\n        this.onHeadersReceived = (details, callback) => blocker.onHeadersReceived(details, callback);\n        this.onIsMutationObserverEnabled = (event) => blocker.onIsMutationObserverEnabled(event);\n    }\n    enable() {\n        if (this.blocker.config.loadCosmeticFilters === true) {\n            this.session.setPreloads(this.session.getPreloads().concat([PRELOAD_PATH]));\n            ipcMain.handle('@ghostery/adblocker/inject-cosmetic-filters', this.onInjectCosmeticFilters);\n            ipcMain.handle('@ghostery/adblocker/is-mutation-observer-enabled', this.onIsMutationObserverEnabled);\n        }\n        if (this.blocker.config.loadNetworkFilters === true) {\n            this.session.webRequest.onHeadersReceived({ urls: ['<all_urls>'] }, this.onHeadersReceived);\n            this.session.webRequest.onBeforeRequest({ urls: ['<all_urls>'] }, this.onBeforeRequest);\n        }\n    }\n    disable() {\n        if (this.blocker.config.loadNetworkFilters === true) {\n            // NOTE - there is currently no support in Electron for multiple\n            // webRequest listeners registered for the same event. This means that\n            // adblocker's listeners can be overriden by other ones in the same\n            // application (or that the adblocker can override another listener\n            // registered previously). Because of this, the only way to disable the\n            // adblocker is to remove all listeners for the events we are interested\n            // in. In the future, we should consider implementing a webRequest\n            // pipeline allowing to register multiple listeners for the same event.\n            this.session.webRequest.onHeadersReceived(null);\n            this.session.webRequest.onBeforeRequest(null);\n        }\n        if (this.blocker.config.loadCosmeticFilters === true) {\n            this.session.setPreloads(this.session.getPreloads().filter((p) => p !== PRELOAD_PATH));\n            ipcMain.removeHandler('@ghostery/adblocker/inject-cosmetic-filters');\n            ipcMain.removeHandler('@ghostery/adblocker/is-mutation-observer-enabled');\n        }\n    }\n}\n/**\n * Wrap `FiltersEngine` into a Electron-friendly helper class. It exposes\n * methods to interface with Electron APIs needed to block ads.\n */\nexport class ElectronBlocker extends FiltersEngine {\n    constructor() {\n        super(...arguments);\n        this.contexts = new WeakMap();\n        // ----------------------------------------------------------------------- //\n        // ElectronBlocker-specific additions to FiltersEngine\n        // ----------------------------------------------------------------------- //\n        this.onIsMutationObserverEnabled = async (_) => {\n            return this.config.enableMutationObserver;\n        };\n        this.onInjectCosmeticFilters = async (event, url, msg) => {\n            const parsed = parse(url);\n            const hostname = parsed.hostname || '';\n            const domain = parsed.domain || '';\n            // `msg` is undefined for the initial call and present for subsequent updates\n            const isFirstRun = msg === undefined;\n            const { active, styles, scripts } = this.getCosmeticsFilters({\n                domain,\n                hostname,\n                url,\n                // DOM information, only available for updates\n                classes: msg === null || msg === void 0 ? void 0 : msg.classes,\n                hrefs: msg === null || msg === void 0 ? void 0 : msg.hrefs,\n                ids: msg === null || msg === void 0 ? void 0 : msg.ids,\n                // Rules to fetch: true for initial call, false for updates\n                getBaseRules: isFirstRun,\n                getInjectionRules: isFirstRun,\n                getExtendedRules: false,\n                getRulesFromHostname: isFirstRun,\n                // Only true for update calls when we have DOM information\n                getRulesFromDOM: !isFirstRun,\n                callerContext: {\n                    frameId: event.frameId,\n                    processId: event.processId,\n                    lifecycle: msg === null || msg === void 0 ? void 0 : msg.lifecycle,\n                },\n            });\n            if (active === false) {\n                return;\n            }\n            if (styles.length > 0) {\n                event.sender.insertCSS(styles, { cssOrigin: 'user' });\n            }\n            for (const script of scripts) {\n                try {\n                    event.sender.executeJavaScript(script, true);\n                }\n                catch (e) {\n                    console.error('@ghostery/adblocker scriptlet crashed', e);\n                }\n            }\n        };\n        this.onHeadersReceived = (details, callback) => {\n            const CSP_HEADER_NAME = 'content-security-policy';\n            const policies = [];\n            const responseHeaders = details.responseHeaders || {};\n            if (details.resourceType === 'mainFrame' || details.resourceType === 'subFrame') {\n                const rawCSP = this.getCSPDirectives(fromElectronDetails(details));\n                if (rawCSP !== undefined) {\n                    policies.push(...rawCSP.split(';').map((csp) => csp.trim()));\n                    // Collect existing CSP headers from response\n                    for (const [name, values] of Object.entries(responseHeaders)) {\n                        if (name.toLowerCase() === CSP_HEADER_NAME) {\n                            policies.push(...values);\n                            delete responseHeaders[name];\n                        }\n                    }\n                    responseHeaders[CSP_HEADER_NAME] = [policies.join(';')];\n                    callback({ responseHeaders });\n                    return;\n                }\n            }\n            callback({});\n        };\n        this.onBeforeRequest = (details, callback) => {\n            const request = fromElectronDetails(details);\n            if (this.config.guessRequestTypeFromUrl === true && request.type === 'other') {\n                request.guessTypeOfRequest();\n            }\n            if (request.isMainFrame()) {\n                callback({});\n                return;\n            }\n            const { redirect, match } = this.match(request);\n            if (redirect) {\n                callback({ redirectURL: redirect.dataUrl });\n            }\n            else if (match) {\n                callback({ cancel: true });\n            }\n            else {\n                callback({});\n            }\n        };\n    }\n    // ----------------------------------------------------------------------- //\n    // Helpers to enable and disable blocking for 'browser'\n    // ----------------------------------------------------------------------- //\n    enableBlockingInSession(session) {\n        let context = this.contexts.get(session);\n        if (context !== undefined) {\n            return context;\n        }\n        // Create new blocking context for `session`\n        context = new BlockingContext(session, this);\n        this.contexts.set(session, context);\n        context.enable();\n        return context;\n    }\n    disableBlockingInSession(session) {\n        const context = this.contexts.get(session);\n        if (context === undefined) {\n            throw new Error('Trying to disable blocking which was not enabled');\n        }\n        this.contexts.delete(session);\n        context.disable();\n    }\n    isBlockingEnabled(session) {\n        return this.contexts.has(session);\n    }\n}\n// re-export @ghostery/adblocker symbols for convenience\nexport * from '@ghostery/adblocker';\n//# sourceMappingURL=index.js.map"],"names":["PRELOAD_PATH","createRequire","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","URL","baseURI","resolve","ipcMain","electron","fromElectronDetails","details","id","url","resourceType","referrer","webContentsId","Request","fromRawDetails","_originalRequestDetails","requestId","sourceUrl","tabId","type","process","env","BlockingContext","constructor","session","blocker","this","onBeforeRequest","callback","onInjectCosmeticFilters","event","msg","onHeadersReceived","onIsMutationObserverEnabled","enable","config","loadCosmeticFilters","setPreloads","getPreloads","concat","handle","loadNetworkFilters","webRequest","urls","disable","filter","p","removeHandler","ElectronBlocker","FiltersEngine","super","arguments","contexts","WeakMap","async","_","enableMutationObserver","parsed","parse","hostname","domain","isFirstRun","undefined","active","styles","scripts","getCosmeticsFilters","classes","hrefs","ids","getBaseRules","getInjectionRules","getExtendedRules","getRulesFromHostname","getRulesFromDOM","callerContext","frameId","processId","lifecycle","length","sender","insertCSS","cssOrigin","script","executeJavaScript","e","console","error","CSP_HEADER_NAME","policies","responseHeaders","rawCSP","getCSPDirectives","push","split","map","csp","trim","name","values","Object","entries","toLowerCase","join","request","guessRequestTypeFromUrl","guessTypeOfRequest","isMainFrame","redirect","match","redirectURL","dataUrl","cancel","enableBlockingInSession","context","get","set","disableBlockingInSession","Error","delete","isBlockingEnabled","has"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"adblocker.umd.min.js","sources":["esm/preload_path.js","esm/index.js"],"sourcesContent":["import { createRequire } from 'node:module';\n//@ts-ignore\nexport const PRELOAD_PATH = createRequire(import.meta.url).resolve('@ghostery/adblocker-electron-preload');\n//# sourceMappingURL=preload_path.js.map","/*!\n * Copyright (c) 2017-present Ghostery GmbH. All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nimport * as electron from 'electron';\nimport { parse } from 'tldts-experimental';\nimport { FiltersEngine, Request } from '@ghostery/adblocker';\nimport { PRELOAD_PATH } from './preload_path.js';\nconst { ipcMain } = electron;\n// https://stackoverflow.com/questions/48854265/why-do-i-see-an-electron-security-warning-after-updating-my-electron-project-t\nprocess.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';\n/**\n * Create an instance of `Request` from `Electron.OnBeforeRequestDetails`.\n */\nexport function fromElectronDetails(details) {\n    const { id, url, resourceType, referrer, webContentsId } = details;\n    return Request.fromRawDetails(webContentsId\n        ? {\n            _originalRequestDetails: details,\n            requestId: `${id}`,\n            sourceUrl: referrer,\n            tabId: webContentsId,\n            type: (resourceType || 'other'),\n            url,\n        }\n        : {\n            _originalRequestDetails: details,\n            requestId: `${id}`,\n            sourceUrl: referrer,\n            type: (resourceType || 'other'),\n            url,\n        });\n}\n/**\n * This abstraction takes care of blocking in one instance of `Electron.Session`.\n */\nexport class BlockingContext {\n    constructor(session, blocker) {\n        this.session = session;\n        this.blocker = blocker;\n        this.onBeforeRequest = (details, callback) => blocker.onBeforeRequest(details, callback);\n        this.onInjectCosmeticFilters = (event, url, msg) => blocker.onInjectCosmeticFilters(event, url, msg);\n        this.onHeadersReceived = (details, callback) => blocker.onHeadersReceived(details, callback);\n        this.onIsMutationObserverEnabled = (event) => blocker.onIsMutationObserverEnabled(event);\n    }\n    enable() {\n        if (this.blocker.config.loadCosmeticFilters === true) {\n            this.session.setPreloads(this.session.getPreloads().concat([PRELOAD_PATH]));\n            ipcMain.handle('@ghostery/adblocker/inject-cosmetic-filters', this.onInjectCosmeticFilters);\n            ipcMain.handle('@ghostery/adblocker/is-mutation-observer-enabled', this.onIsMutationObserverEnabled);\n        }\n        if (this.blocker.config.loadNetworkFilters === true) {\n            this.session.webRequest.onHeadersReceived({ urls: ['<all_urls>'] }, this.onHeadersReceived);\n            this.session.webRequest.onBeforeRequest({ urls: ['<all_urls>'] }, this.onBeforeRequest);\n        }\n    }\n    disable() {\n        if (this.blocker.config.loadNetworkFilters === true) {\n            // NOTE - there is currently no support in Electron for multiple\n            // webRequest listeners registered for the same event. This means that\n            // adblocker's listeners can be overriden by other ones in the same\n            // application (or that the adblocker can override another listener\n            // registered previously). Because of this, the only way to disable the\n            // adblocker is to remove all listeners for the events we are interested\n            // in. In the future, we should consider implementing a webRequest\n            // pipeline allowing to register multiple listeners for the same event.\n            this.session.webRequest.onHeadersReceived(null);\n            this.session.webRequest.onBeforeRequest(null);\n        }\n        if (this.blocker.config.loadCosmeticFilters === true) {\n            this.session.setPreloads(this.session.getPreloads().filter((p) => p !== PRELOAD_PATH));\n            ipcMain.removeHandler('@ghostery/adblocker/inject-cosmetic-filters');\n            ipcMain.removeHandler('@ghostery/adblocker/is-mutation-observer-enabled');\n        }\n    }\n}\n/**\n * Wrap `FiltersEngine` into a Electron-friendly helper class. It exposes\n * methods to interface with Electron APIs needed to block ads.\n */\nexport class ElectronBlocker extends FiltersEngine {\n    constructor() {\n        super(...arguments);\n        this.contexts = new WeakMap();\n        // ----------------------------------------------------------------------- //\n        // ElectronBlocker-specific additions to FiltersEngine\n        // ----------------------------------------------------------------------- //\n        this.onIsMutationObserverEnabled = async (_) => {\n            return this.config.enableMutationObserver;\n        };\n        this.onInjectCosmeticFilters = async (event, url, msg) => {\n            const parsed = parse(url);\n            const hostname = parsed.hostname || '';\n            const domain = parsed.domain || '';\n            // `msg` is undefined for the initial call and present for subsequent updates\n            const isFirstRun = msg === undefined;\n            const { active, styles, scripts } = this.getCosmeticsFilters({\n                domain,\n                hostname,\n                url,\n                // DOM information, only available for updates\n                classes: msg === null || msg === void 0 ? void 0 : msg.classes,\n                hrefs: msg === null || msg === void 0 ? void 0 : msg.hrefs,\n                ids: msg === null || msg === void 0 ? void 0 : msg.ids,\n                // Rules to fetch: true for initial call, false for updates\n                getBaseRules: isFirstRun,\n                getInjectionRules: isFirstRun,\n                getExtendedRules: false,\n                getRulesFromHostname: isFirstRun,\n                // Only true for update calls when we have DOM information\n                getRulesFromDOM: !isFirstRun,\n                callerContext: {\n                    frameId: event.frameId,\n                    processId: event.processId,\n                    lifecycle: msg === null || msg === void 0 ? void 0 : msg.lifecycle,\n                },\n            });\n            if (active === false) {\n                return;\n            }\n            if (styles.length > 0) {\n                event.sender.insertCSS(styles, { cssOrigin: 'user' });\n            }\n            for (const script of scripts) {\n                try {\n                    event.sender.executeJavaScript(script, true);\n                }\n                catch (e) {\n                    console.error('@ghostery/adblocker scriptlet crashed', e);\n                }\n            }\n        };\n        this.onHeadersReceived = (details, callback) => {\n            const CSP_HEADER_NAME = 'content-security-policy';\n            const policies = [];\n            const responseHeaders = details.responseHeaders || {};\n            if (details.resourceType === 'mainFrame' || details.resourceType === 'subFrame') {\n                const rawCSP = this.getCSPDirectives(fromElectronDetails(details));\n                if (rawCSP !== undefined) {\n                    policies.push(...rawCSP.split(';').map((csp) => csp.trim()));\n                    // Collect existing CSP headers from response\n                    for (const [name, values] of Object.entries(responseHeaders)) {\n                        if (name.toLowerCase() === CSP_HEADER_NAME) {\n                            policies.push(...values);\n                            delete responseHeaders[name];\n                        }\n                    }\n                    responseHeaders[CSP_HEADER_NAME] = [policies.join(';')];\n                    callback({ responseHeaders });\n                    return;\n                }\n            }\n            callback({});\n        };\n        this.onBeforeRequest = (details, callback) => {\n            const request = fromElectronDetails(details);\n            if (this.config.guessRequestTypeFromUrl === true && request.type === 'other') {\n                request.guessTypeOfRequest();\n            }\n            if (request.isMainFrame()) {\n                callback({});\n                return;\n            }\n            const { redirect, match } = this.match(request);\n            if (redirect) {\n                callback({ redirectURL: redirect.dataUrl });\n            }\n            else if (match) {\n                callback({ cancel: true });\n            }\n            else {\n                callback({});\n            }\n        };\n    }\n    // ----------------------------------------------------------------------- //\n    // Helpers to enable and disable blocking for 'browser'\n    // ----------------------------------------------------------------------- //\n    enableBlockingInSession(session) {\n        let context = this.contexts.get(session);\n        if (context !== undefined) {\n            return context;\n        }\n        // Create new blocking context for `session`\n        context = new BlockingContext(session, this);\n        this.contexts.set(session, context);\n        context.enable();\n        return context;\n    }\n    disableBlockingInSession(session) {\n        const context = this.contexts.get(session);\n        if (context === undefined) {\n            throw new Error('Trying to disable blocking which was not enabled');\n        }\n        this.contexts.delete(session);\n        context.disable();\n    }\n    isBlockingEnabled(session) {\n        return this.contexts.has(session);\n    }\n}\n// re-export @ghostery/adblocker symbols for convenience\nexport * from '@ghostery/adblocker';\n//# sourceMappingURL=index.js.map"],"names":["PRELOAD_PATH","createRequire","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","URL","baseURI","resolve","ipcMain","electron","fromElectronDetails","details","id","url","resourceType","referrer","webContentsId","Request","fromRawDetails","_originalRequestDetails","requestId","sourceUrl","tabId","type","process","env","BlockingContext","constructor","session","blocker","this","onBeforeRequest","callback","onInjectCosmeticFilters","event","msg","onHeadersReceived","onIsMutationObserverEnabled","enable","config","loadCosmeticFilters","setPreloads","getPreloads","concat","handle","loadNetworkFilters","webRequest","urls","disable","filter","p","removeHandler","ElectronBlocker","FiltersEngine","super","arguments","contexts","WeakMap","async","_","enableMutationObserver","parsed","parse","hostname","domain","isFirstRun","undefined","active","styles","scripts","getCosmeticsFilters","classes","hrefs","ids","getBaseRules","getInjectionRules","getExtendedRules","getRulesFromHostname","getRulesFromDOM","callerContext","frameId","processId","lifecycle","length","sender","insertCSS","cssOrigin","script","executeJavaScript","e","console","error","CSP_HEADER_NAME","policies","responseHeaders","rawCSP","getCSPDirectives","push","split","map","csp","trim","name","values","Object","entries","toLowerCase","join","request","guessRequestTypeFromUrl","guessTypeOfRequest","isMainFrame","redirect","match","redirectURL","dataUrl","cancel","enableBlockingInSession","context","get","set","disableBlockingInSession","Error","delete","isBlockingEnabled","has"],"mappings":"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"}
\ No newline at end of file
